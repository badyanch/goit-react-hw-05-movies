{"version":3,"file":"static/js/754.8e26ec0c.chunk.js","mappings":"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","sources":["components/CastCard/CastCard.styled.jsx","components/CastCard/CastCard.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/ErrorMessage/ErrorMessage.styled.jsx","components/ErrorMessage/ErrorMessage.jsx","services/moviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n\n  background-color: ${({ theme }) => theme.colors.primaryBg};\n  border-radius: 4px;\n  box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.08),\n    0px 2px 2px rgba(0, 0, 0, 0.12);\n\n  overflow: hidden;\n`;\n\nexport const Thumb = styled.div`\n  width: 100%;\n  height: 320px;\n`;\n\nexport const Image = styled.img`\n  display: block;\n  width: 100%;\n  height: 100%;\n\n  object-fit: cover;\n  object-position: center;\n`;\n\nexport const TextBox = styled.div`\n  flex-grow: 1;\n  padding: 8px 12px;\n`;\n\nexport const PersonName = styled.h3`\n  margin-bottom: 4px;\n\n  font-size: 20px;\n  line-height: 1.5;\n`;\n\nexport const Character = styled.p`\n  font-size: 16px;\n  line-height: 1.5;\n  color: ${({ theme }) => theme.colors.secondaryText};\n`;\n","import PropTypes from 'prop-types';\nimport * as S from './CastCard.styled';\nimport defaultAvatar from 'images/default_avatar.jpg';\n\nconst CastCard = ({ name, character, avatar }) => (\n  <S.Card>\n    <S.Thumb>\n      <S.Image\n        src={\n          avatar ? `https://image.tmdb.org/t/p/w400/${avatar}` : defaultAvatar\n        }\n        alt={name}\n        loading=\"lazy\"\n      />\n    </S.Thumb>\n    <S.TextBox>\n      <S.PersonName>{name}</S.PersonName>\n      <S.Character>Character: {character}</S.Character>\n    </S.TextBox>\n  </S.Card>\n);\n\nCastCard.propTypes = {\n  name: PropTypes.string.isRequired,\n  character: PropTypes.string.isRequired,\n  avatar: PropTypes.string,\n};\n\nexport default CastCard;\n","import styled from 'styled-components';\n\nexport const HideTitle = styled.h2`\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  border: 0;\n  padding: 0;\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  margin: -1px;\n`;\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: 210px;\n  row-gap: 24px;\n  column-gap: 20px;\n  justify-content: center;\n\n  @media screen and (min-width: 520px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media screen and (min-width: 720px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n\n  @media screen and (min-width: 920px) {\n    grid-template-columns: repeat(4, 1fr);\n  }\n\n  @media screen and (min-width: 1180px) {\n    grid-template-columns: repeat(5, 1fr);\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as moviesAPI from 'services';\nimport { Status } from 'constants';\nimport CastCard from 'components/CastCard/CastCard';\nimport Loader from 'components/Loader/Loader';\nimport ErrorMessage from 'components/ErrorMessage/ErrorMessage';\nimport * as S from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState(Status.IDLE);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setStatus(Status.PENDING);\n\n        const { cast } = await moviesAPI.getMovieCredits(movieId);\n\n        const newCast = cast.map(({ id, name, character, profile_path }) => ({\n          id,\n          name,\n          character,\n          profile_path,\n        }));\n\n        setCast(newCast);\n        setStatus(Status.RESOLVED);\n      } catch (error) {\n        console.log(error);\n        setError(error);\n        setStatus(Status.REJECTED);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  if (status === Status.IDLE) {\n    return <></>;\n  }\n\n  if (status === Status.PENDING) {\n    return <Loader />;\n  }\n\n  if (status === Status.REJECTED) {\n    return <ErrorMessage errorText={error.message} />;\n  }\n\n  if (status === Status.RESOLVED) {\n    return (\n      <>\n        <S.HideTitle>Cast</S.HideTitle>\n        <S.List>\n          {cast.map(({ id, name, character, profile_path }) => (\n            <li key={id}>\n              <CastCard\n                name={name}\n                character={character}\n                avatar={profile_path}\n              />\n            </li>\n          ))}\n        </S.List>\n      </>\n    );\n  }\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const ErrorText = styled.p`\n  display: inline-block;\n  margin-top: 4px;\n  padding: 8px;\n  font-size: 18px;\n  line-height: 1.5;\n  color: ${({ theme }) => theme.colors.secondaryText};\n  background-color: #fabdb5;\n  border: 1px solid #e34542;\n  border-radius: 8px;\n`;\n","import PropTypes from 'prop-types';\nimport * as S from './ErrorMessage.styled';\n\nconst ErrorMessage = ({ errorText }) => (\n  <S.Container>\n    <S.ErrorText>{errorText}</S.ErrorText>\n  </S.Container>\n);\n\nErrorMessage.propTypes = {\n  errorText: PropTypes.string.isRequired,\n};\n\nexport default ErrorMessage;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst API_KEY = 'e4ed0f086cbca77909d91aa152a380ab';\n\nconst defaultParams = {\n  api_key: API_KEY,\n};\n\nexport const getTrending = async () => {\n  const res = await axios.get('/trending/movie/day', { params: defaultParams });\n\n  return res.data;\n};\n\nexport const searchMoviesByQuery = async query => {\n  const params = {\n    ...defaultParams,\n    query,\n  };\n\n  const res = await axios.get('/search/movie', { params });\n\n  return res.data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const res = await axios.get(`/movie/${movieId}`, { params: defaultParams });\n\n  return res.data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const res = await axios.get(`/movie/${movieId}/credits`, {\n    params: defaultParams,\n  });\n\n  return res.data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const res = await axios.get(`/movie/${movieId}/reviews`, {\n    params: defaultParams,\n  });\n\n  return res.data;\n};\n"],"names":["Card","styled","theme","colors","primaryBg","Thumb","Image","TextBox","PersonName","Character","secondaryText","name","character","avatar","src","alt","loading","HideTitle","List","useState","cast","setCast","Status","status","setStatus","error","setError","movieId","useParams","useEffect","fetchCast","moviesAPI","newCast","map","id","profile_path","console","log","Loader","ErrorMessage","errorText","message","Container","ErrorText","axios","defaultParams","api_key","getTrending","params","res","data","searchMoviesByQuery","query","getMovieDetails","getMovieCredits","getMovieReviews"],"sourceRoot":""}